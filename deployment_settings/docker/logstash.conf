input {
	kafka {
		bootstrap_servers => "kafka:9092"
		topics => ["s2l.ecommerce.merchants","s2l.ecommerce.products"]
		codec => "json"
	}
}

filter {
	json {
		source => "payload"
	}
	mutate {
		add_field => {
			"[@metadata][operationType]" => "%{[operationType]}"
			"[@metadata][target_index]" => "%{[ns][db]}.%{[ns][coll]}"
			"[@metadata][document_id]" => "%{[documentKey][_id]}"
		}
		remove_field => ["@version","@timestamp","payload", "_id","clusterTime","ns","documentKey","schema"] 
	}
	ruby {
		code => '
			require "ostruct"
			
			# SPREAD DOCUMENT DATA
			if event.get("operationType") != "delete" 
				event.get("fullDocument").each{
					|k, v|
					event.set(k,v)
				}
			end
			
			
			# OPERATION METADATA FOR ELASTIC
			if event.get("operationType") == "insert"
				event.set("[@metadata][operationType]","create")
			elsif event.get("operationType") == "replace" or event.get("operationType") == "update" 
				event.set("[@metadata][operationType]","update")
			elsif event.get("operationType") == "delete"
				event.set("[@metadata][operationType]","delete")
			else 
				event.set("[@metadata][operationType]", "index")
			end

			# PRODUCT INDEX
			if event.get("[@metadata][target_index]") == "ecommerce.products" 
				# CREATE 
				if event.get("operationType") == "insert" 
					# populate product suggestion field
					event.set("suggest", event.get("tags"))

					# MERCHANT : shipping
					merchant = event.get("merchant") 
					if merchant.key?("shippings") && merchant["shippings"] != nil
						merchant["shippings"].each {
							|shipping|
							shipping["created_at"] = Time.at((shipping["created_at"]["$date"]/1000)).utc
							shipping["updated_at"] = Time.at((shipping["updated_at"]["$date"]/1000)).utc
						}
						event.set("merchant", merchant)
					end

				# UPDATE
				elsif event.get("operationType") == "replace" or event.get("operationType") == "update" 
					# populate product suggestion field
					event.set("suggest", event.get("tags"))

					# MERCHANT : shipping
					merchant = event.get("merchant") 
					if merchant.key?("shippings") && merchant["shippings"] != nil
						merchant["shippings"].each {
							|shipping|
							shipping["created_at"] = Time.at((shipping["created_at"]["$date"]/1000)).utc
							shipping["updated_at"] = Time.at((shipping["updated_at"]["$date"]/1000)).utc
						}
						event.set("merchant", merchant)
					end
				end

			# MERCHANT INDEX
			elsif event.get("[@metadata][target_index]") == "ecommerce.merchants"
				# CREATE
				if event.get("operationType") == "insert"
					# SHIPPINGS
					shippings = event.get("shippings") 
					if shippings != nil
						shippings.each {
							|shipping|
							shipping["created_at"] = Time.at((shipping["created_at"]["$date"]/1000)).utc
							shipping["updated_at"] = Time.at((shipping["updated_at"]["$date"]/1000)).utc
						}
						event.set("shippings", shippings)
					end

				# UPDATE
				elsif event.get("operationType") == "replace" or event.get("operationType") == "update"
					# SHIPPINGS
					shippings = event.get("shippings") 
					if shippings != nil
						shippings.each {
							|shipping|
							shipping["created_at"] = Time.at((shipping["created_at"]["$date"]/1000)).utc
							shipping["updated_at"] = Time.at((shipping["updated_at"]["$date"]/1000)).utc
						}
						event.set("shippings", shippings)
					end
				end
			end

			# REMOVE ADDITION FIELDS
			event.remove("fullDocument")
			event.remove("operationType")
			event.remove("_id")
		'
	}
	date {
		match => ["[updated_at][$date]","UNIX_MS"]
		target => "updated_at"
	}
	date {
		match => ["[created_at][$date]","UNIX_MS"]
		target => "created_at"
	}
}

output {
	elasticsearch {
		hosts => "elastic:9200"
		user => "elastic"
		password => "changeme"
		index => "%{[@metadata][target_index]}"
		document_id => "%{[@metadata][document_id]}"
		action => "%{[@metadata][operationType]}"
	}
	stdout {
		codec => rubydebug { metadata => true }
	}
}
